name: Fetch and Update Data

on:
  push:
    branches:
      - main
  schedule:
    - cron: '*/30 * * * *'

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download CSV files
        shell: pwsh
        run: |
          $baseDate = Get-Date -Format "yyyyMMdd"
          $outputDir = "docs/data"
          $urls = @(
              @{
                  url = "https://ea-edubase-backend-prod.azurewebsites.net/edubase/edubasealldata$baseDate.csv";
                  outputFile = "edubasealldata.csv"
              },
              @{
                  url = "https://ea-edubase-backend-prod.azurewebsites.net/edubase/links_edubasealldata$baseDate.csv";
                  outputFile = "links_edubasealldata.csv"
              }
          )

          if (-Not (Test-Path -Path $outputDir)) {
              New-Item -ItemType Directory -Path $outputDir | Out-Null
          }

          foreach ($item in $urls) {
              try {
                  $outputFile = Join-Path -Path $outputDir -ChildPath $item.outputFile
                  Invoke-WebRequest -Uri $item.url -OutFile $outputFile -ErrorAction Stop
                  Write-Host "Downloaded: $($item.url) to $outputFile"
              } catch {
                  Write-Host "Failed to download: $($item.url)"
              }
          }

      - name: Convert CSV files to JSON
        shell: pwsh
        run: |
          $dataDir = "docs/data"
          $establishmentDir = Join-Path -Path $dataDir -ChildPath "establishment"
          $csvFilePath = Join-Path -Path $dataDir -ChildPath "edubasealldata.csv"
          
          # Ensure the establishment directory exists
          If (-Not (Test-Path -Path $establishmentDir)) {
              New-Item -ItemType Directory -Path $establishmentDir
          }
          
          try {
              Write-Host "Begin reading:  $csvFilePath"
              $data = Import-Csv -Path $csvFilePath
              Write-Host "End reading: $csvFilePath"
          
          #    # Take only the first 10 entries (for debugging / running locally)
          #    $data = $data | Select-Object -First 10
          
              # Create a hashset of all URNs in the CSV file for quick lookup
              $urnsInCsv = @{}
          
              # Process each row and create JSON files
              $rowIndex = 0
              foreach ($row in $data) {
                  $rowIndex++
                  if ($rowIndex % 1000 -eq 0) {
                      Write-Host "Processing row ${rowIndex} of $($data.Length)"
                  }
          
                  $urn = $row.URN
                  $urnsInCsv[$urn] = $true
                  $jsonFile = Join-Path -Path $establishmentDir -ChildPath ($urn + ".json")
          
                  Write-Debug "Begin converting to JSON: $csvFilePath with URN $urn to $jsonFile"
                  $json = $row | ConvertTo-Json -Depth 100
                  Write-Debug "End converting to JSON: $csvFilePath with URN $urn to $jsonFile"
          
                  Write-Debug "Begin writing JSON file: $jsonFile"
                  Set-Content -Path $jsonFile -Value $json
                  Write-Debug "End writing JSON file: $jsonFile"
              }
          
              # Remove JSON files for URNs that are no longer present in the CSV
              $existingJsonFiles = Get-ChildItem -Path $establishmentDir -Filter *.json
              foreach ($jsonFile in $existingJsonFiles) {
                  $urn = [System.IO.Path]::GetFileNameWithoutExtension($jsonFile.Name)
                  if (-not $urnsInCsv.ContainsKey($urn)) {
                      Write-Host "Removing outdated JSON file: $jsonFile"
                      Remove-Item -Path $jsonFile.FullName
                  }
              }
          } catch {
              Write-Host "Failed to convert: $csvFilePath"
              Write-Host $_.Exception.Message
          }

      - name: Generate basic static HTML page
        shell: pwsh
        run: |
          $templateFile = "docs/index.html.template"
          $outputFile = "docs/index.html"
          $jsonDirectory = "docs/data/establishment"
          
          # Get all JSON files in the establishment directory
          $jsonFiles = Get-ChildItem -Path $jsonDirectory -Filter *.json
          $totalFiles = $jsonFiles.Length
          
          Write-Host "Begin generating HTML content"
          $listDataHtmlString = ""
          $fileIndex = 1
          
          # Iterate over each JSON file and extract the necessary information
          foreach ($jsonFile in $jsonFiles) {
              Write-Host "Begin reading JSON file ${fileIndex} of ${totalFiles}: $jsonFile"
              $jsonString = Get-Content -Path $jsonFile.FullName
              Write-Host "End   reading JSON file ${fileIndex} of ${totalFiles}: $jsonFile"
          
              Write-Host "Begin converting JSON string to JSON object"
              $json = $jsonString | ConvertFrom-Json
              Write-Host "End   converting JSON string to JSON object"
          
              # Extract necessary fields from the JSON content
              $urn = $json.URN
              $name = $json."EstablishmentName"
              $link = "./data/establishment/$($jsonFile.Name)"
          
              # Append URN, Name, and Link to HTML list
              $listDataHtmlString += "<li>URN: $urn - Name: $name - <a href='$link'>JSON File</a></li>`n"
          
              $fileIndex++
          }
          
          $template = Get-Content -Path $templateFile
          $template = $template -replace "<!-- list placeholder -->", $listDataHtmlString
          Write-Host "End   generating HTML content"
          
          $htmlContent = $template
          $htmlContent | Set-Content -Path $outputFile
          Write-Host "Generated HTML file: $outputFile"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --all
          if ! git diff-index --quiet HEAD; then
            git commit -m "Update data files"
            git push
          else
            echo "No changes detected"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
